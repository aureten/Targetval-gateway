{
  "openapi": "3.1.0",
  "info": {
    "title": "TargetVal Gateway (ChatGPT Action Surface)",
    "version": "2025.10",
    "description": "Minimal Action surface that still exposes all capabilities:\n- Run ANY of the 55 modules (via module_key) with POST /v1/module\n- Aggregate many modules with ordering control (sequential/parallel)\n- Domain aggregation (D1..D6) with continue-on-error semantics\n- Literature meta endpoint\n- Synthesis (integration) + bucketed math layer\n\nNOTE: The live server mounts the API at /v1.\n"
  },
  "servers": [
    {
      "url": "https://targetval-gateway.onrender.com/v1"
    }
  ],
  "paths": {
    "/healthz": {
      "get": {
        "summary": "Health check",
        "operationId": "healthz",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/modules": {
      "get": {
        "summary": "List canonical module keys available on this deployment",
        "operationId": "listModules",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/module": {
      "post": {
        "summary": "Run a single module (by module_key) with flexible parameters",
        "operationId": "runModule",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "module_key": {
                    "type": "string",
                    "description": "One of the 55 canonical keys from /v1/modules"
                  },
                  "gene": {
                    "type": "string"
                  },
                  "symbol": {
                    "type": "string"
                  },
                  "ensembl": {
                    "type": "string"
                  },
                  "efo": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 50
                  },
                  "extra": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Free-form passthrough (species, tissue, cell_type, cutoff, variant, drug, uniprot, etc.)"
                  }
                },
                "required": [
                  "module_key"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Module output",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/aggregate": {
      "post": {
        "summary": "Run many modules (optionally filtered by domain) with order control",
        "operationId": "aggregateModules",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "modules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "If omitted, runs all 55 modules."
                  },
                  "domain": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 6
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "D1..D6 name or 1..6 to restrict modules."
                  },
                  "primary_only": {
                    "type": "boolean",
                    "default": true,
                    "description": "When domain is set, restrict to primary domain only."
                  },
                  "order": {
                    "type": "string",
                    "enum": [
                      "sequential",
                      "parallel"
                    ],
                    "default": "sequential"
                  },
                  "continue_on_error": {
                    "type": "boolean",
                    "default": true
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 50
                  },
                  "gene": {
                    "type": "string"
                  },
                  "symbol": {
                    "type": "string"
                  },
                  "ensembl_id": {
                    "type": "string"
                  },
                  "efo": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "species": {
                    "type": "integer"
                  },
                  "cutoff": {
                    "type": "number"
                  },
                  "extra": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Aggregate output",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/domain/{domain_id}/run": {
      "post": {
        "summary": "Run all modules of a domain (D1..D6) sequentially; never stops on individual errors",
        "operationId": "runDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 6
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "primary_only": {
                    "type": "boolean",
                    "default": true
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 50
                  },
                  "gene": {
                    "type": "string"
                  },
                  "symbol": {
                    "type": "string"
                  },
                  "ensembl_id": {
                    "type": "string"
                  },
                  "efo": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "species": {
                    "type": "integer"
                  },
                  "cutoff": {
                    "type": "number"
                  },
                  "extra": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain aggregate output",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/lit/meta": {
      "get": {
        "summary": "Literature meta/search (Europe PMC / PubMed, deployment\u2011specific)",
        "operationId": "litMeta",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gene",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "symbol",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "efo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "condition",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 1,
              "maximum": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/synth/integrate": {
      "post": {
        "summary": "Synthesis/integration layer across modules",
        "operationId": "synthIntegrate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gene": {
                    "type": "string"
                  },
                  "symbol": {
                    "type": "string"
                  },
                  "efo": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "modules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "math",
                      "vote",
                      "rank",
                      "bayes",
                      "hybrid"
                    ],
                    "default": "math"
                  },
                  "extra": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Synthesis output",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/synth/bucket": {
      "get": {
        "summary": "Mathematical synthesis per evidence bucket",
        "operationId": "synthBucket",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "e.g., genetics, association, expression, mechanism, tract, clinical"
          },
          {
            "in": "query",
            "name": "gene",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "symbol",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "efo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "condition",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "auto",
                "live",
                "snapshot"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    }
  }
}
