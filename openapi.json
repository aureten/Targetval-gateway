{
  "openapi": "3.0.3",
  "info": {
    "title": "TargetVal Gateway (Actions Surface)",
    "version": "2025.10.2",
    "description": "Compact Action surface for ChatGPT. Access all 55 modules (dynamic keys), literature, synthesis, and domain sequential runs."
  },
  "servers": [
    {
      "url": "https://targetval-gateway.onrender.com/v1"
    }
  ],
  "paths": {
    "/healthz": {
      "get": {
        "operationId": "healthzV1",
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    },
    "/modules": {
      "get": {
        "operationId": "listModulesV1",
        "summary": "List canonical module keys (55) from YAML registry",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/module": {
      "post": {
        "operationId": "runModuleV1",
        "summary": "Run one module by key",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleRunRequest"
              },
              "example": {
                "module_key": "genetics-l2g",
                "symbol": "IL6",
                "efo": "EFO_0003767",
                "limit": 50
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Module output",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    },
    "/aggregate": {
      "post": {
        "operationId": "aggregateModulesV1",
        "summary": "Run many modules; supports sequential or parallel order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateRequest"
              },
              "example": {
                "modules": [
                  "genetics-l2g",
                  "genetics-coloc",
                  "expr-baseline"
                ],
                "symbol": "IL6",
                "efo": "EFO_0003767",
                "order": "sequential",
                "continue_on_error": true,
                "limit": 50
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Aggregate output",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    },
    "/domain/{domain_id}/run": {
      "post": {
        "operationId": "runDomainV1",
        "summary": "Run all modules of a domain (D1..D6) sequentially and continue on errors",
        "parameters": [
          {
            "in": "path",
            "name": "domain_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 6
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainRunRequest"
              },
              "example": {
                "symbol": "IL6",
                "condition": "ulcerative colitis",
                "limit": 50
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain aggregate output",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    },
    "/lit/meta": {
      "get": {
        "operationId": "litMetaV1",
        "summary": "Literature meta/search",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gene",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "efo",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    },
    "/synth/integrate": {
      "post": {
        "operationId": "synthIntegrateV1",
        "summary": "Synthesis/integration layer across modules",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynthIntegrateRequest"
              },
              "example": {
                "symbol": "IL6",
                "condition": "ulcerative colitis",
                "modules": [
                  "genetics-l2g",
                  "expr-baseline",
                  "mech-ppi"
                ],
                "method": "math"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    },
    "/synth/bucket": {
      "get": {
        "operationId": "synthBucketV1",
        "summary": "Mathematical synthesis per bucket",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gene",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "efo",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 50
            }
          },
          {
            "in": "query",
            "name": "mode",
            "schema": {
              "type": "string",
              "enum": [
                "auto",
                "live",
                "snapshot"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericObject"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GenericObject": {
        "type": "object",
        "additionalProperties": true,
        "description": "Flexible JSON object"
      },
      "ModuleRunRequest": {
        "type": "object",
        "properties": {
          "module_key": {
            "type": "string",
            "description": "One of the 55 keys from /v1/modules"
          },
          "gene": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "ensembl": {
            "type": "string"
          },
          "efo": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 50
          },
          "extra": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "module_key"
        ]
      },
      "AggregateRequest": {
        "type": "object",
        "properties": {
          "modules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "domain": {
            "type": "string",
            "description": "Accepts 'D1'..'D6' or '1'..'6'"
          },
          "primary_only": {
            "type": "boolean",
            "default": true
          },
          "order": {
            "type": "string",
            "enum": [
              "sequential",
              "parallel"
            ],
            "default": "sequential"
          },
          "continue_on_error": {
            "type": "boolean",
            "default": true
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 50
          },
          "gene": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "ensembl_id": {
            "type": "string"
          },
          "efo": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "species": {
            "type": "integer"
          },
          "cutoff": {
            "type": "number"
          },
          "extra": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "DomainRunRequest": {
        "type": "object",
        "properties": {
          "primary_only": {
            "type": "boolean",
            "default": true
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 50
          },
          "gene": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "ensembl_id": {
            "type": "string"
          },
          "efo": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "species": {
            "type": "integer"
          },
          "cutoff": {
            "type": "number"
          },
          "extra": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "SynthIntegrateRequest": {
        "type": "object",
        "properties": {
          "gene": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "efo": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "modules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "method": {
            "type": "string",
            "enum": [
              "math",
              "vote",
              "rank",
              "bayes",
              "hybrid"
            ],
            "default": "math"
          },
          "extra": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    }
  }
}
